#! /usr/bin/env ruby

require 'prattle/tokens'

class Parser

  ## Parse String
  #
  # Converts a string into a stream of tokens and parses it ito a
  # structured representation

  def self.parse(block)
    p = Parser.new TokenStream.new block
    puts p.parse_expression.to_s
  end

  ## Create a Parser from a TokenStream
  #

  def initialize(token_stream)
    @ts = token_stream
  end

  @@infix_types = [ :+, :- ]

  ## Parse Expression
  #
  # Parses the current token stream and returns the next Expression in
  # it

  def parse_expression

    return if @ts.match :EOF

    lhs = parse_value

    type = @ts.peek.type
    
    return unless @@infix_types.include? type

    op = @ts.chomp type
    rhs = parse_expression
    [lhs, op, rhs]
  end

  @@prefix_types = [ :number, :identifier, :+, :- ]

  ## Parse Value
  #
  # Parse the representation of a value (number or variable reference)
  
  def parse_value
    type = @ts.peek.type
    return @ts.chomp type if @@prefix_types.include? type
    raise ParseError.new @@prefix_types, @ts.peek
  end
      
end

Parser.parse $*.join(" ")
