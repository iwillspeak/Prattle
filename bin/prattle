#! /usr/bin/env ruby

require 'prattle/tokens'
require 'prattle/expressions'

class ValueParselet

  def parse(parser, token)
    return Prattle::ValueExpression.new token.value
  end
end

class PrefixParselet

  def parse(parser, token)
    expression = parser.parse_expression
    return Prattle::PrefixOperatorExpression.new token.value, expression
  end
end

class Parser

  ## Parse String
  #
  # Converts a string into a stream of tokens and parses it ito a
  # structured representation

  def self.parse(block)
    p = Parser.new Prattle::TokenStream.new block
    puts p.parse_expression
  end

  ## Create a Parser from a TokenStream
  #

  def initialize(token_stream)
    @ts = token_stream
  end

  ## Parse Expression
  #
  # Parses the current token stream and returns the next Expression in
  # it

  def parse_expression
    tok = @ts.peek
    @ts.chomp tok.type

    parselet = @@prefix_types[tok.type]

    if !parselet
      raise Prattle::ParseError.new @@prefix_types.keys, tok
    end

    return parselet.parse(self, tok)
  end

  @@prefix_types = {
    :number => ValueParselet.new,
    :identifier => ValueParselet.new,
    :+ => PrefixParselet.new,
    :- => PrefixParselet.new
  }
      
end

Parser.parse $*.join(" ")
