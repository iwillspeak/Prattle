#! /usr/bin/env ruby

require 'prattle/tokens'
require 'prattle/expressions'

class ValueParselet

  def parse(parser, token)
    return Prattle::ValueExpression.new token.value
  end
end

class PrefixParselet

  def parse(parser, token)
    expression = parser.parse_expression 100
    return Prattle::PrefixOperatorExpression.new token.value, expression
  end
end

class GroupingParselet
  
  def parse(parser, token)
    expression = parser.parse_expression 0
    parser.ts.chomp ")".to_sym
    return expression
  end
end

class InfixParselet

  attr_accessor :binding_power

  def initialize(binding_power)
    @binding_power = binding_power
  end
end

class BinOpParselet < InfixParselet

  def parse(parser, lhs, token)
    rhs = parser.parse_expression @binding_power
    return Prattle::BinaryOperatorExpression.new lhs, token.value, rhs
  end

end

class Parser

  ## Parse String
  #
  # Converts a string into a stream of tokens and parses it ito a
  # structured representation

  def self.parse(block)
    p = Parser.new Prattle::TokenStream.new block
    puts p.parse_expression 0
  end

  ## Create a Parser from a TokenStream
  #

  def initialize(token_stream)
    @ts = token_stream
  end

  attr_accessor :ts

  ## Parse Expression
  #
  # Parses the current token stream and returns the next Expression in
  # it

  def parse_expression binding_power
    tok = @ts.peek
    @ts.chomp tok.type

    parselet = @@prefix_types[tok.type]

    if !parselet
      raise Prattle::ParseError.new @@prefix_types.keys, tok
    end

    lhs = parselet.parse(self, tok)

    parselet = @@infix_types[@ts.peek.type]

    while binding_power < get_binding_power(parselet)
      tok = @ts.chomp @ts.peek.type

      lhs = parselet.parse self, lhs, tok

      parselet = @@infix_types[@ts.peek.type]
    end

    return lhs
  end

  def get_binding_power(parselet)
    return parselet ? parselet.binding_power : 0
  end

  @@infix_types = {
    "=".to_sym => BinOpParselet.new(1),
    :+ => BinOpParselet.new(2),
    :- => BinOpParselet.new(2),
    :* => BinOpParselet.new(3),
    :/ => BinOpParselet.new(3),
  }

  @@prefix_types = {
    :number => ValueParselet.new,
    :identifier => ValueParselet.new,
    :+ => PrefixParselet.new,
    :- => PrefixParselet.new,
    "(".to_sym => GroupingParselet.new
  }
      
end

Parser.parse $*.join(" ")
